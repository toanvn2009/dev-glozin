{% liquid
  assign block_st = block.settings
  assign video_source = block_st.video_source
  assign video_url = block_st.video_url
  assign video_local = block_st.video_local
  assign cover_image = block_st.cover_image
  assign autoplay = block_st.autoplay
  assign looping = block_st.looping
  assign alt_description = block_st.alt_description
  assign aspect_ratio = block_st.aspect_ratio
  assign desktop_video_width = block_st.desktop_video_width
  if aspect_ratio != 'adapt'
    assign aspect_ratio = aspect_ratio
  else
    if video_local != blank
      assign aspect_ratio = video_local.aspect_ratio
    elsif video_url != blank
      assign aspect_ratio = '16/9'
    else
      assign aspect_ratio = '16/9'
    endif
  endif
  assign video_id = video_url.id
  assign rounded = ' rounded'
  if section.settings.section_width == 'full_width'
    assign rounded = ''
  endif
  assign borders = block_st.borders
  assign border_width = block_st.border_width
  assign border_opacity = block_st.border_opacity
  assign border_radius = block_st.border_radius
%}
{% style %}
  .video-section video,
  .video-section iframe {
    object-fit: cover;
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    border: none;
  }
{% endstyle %}
{% capture style %}
  --space-bottom: {{ block.settings.padding_bottom }};--space-top: {{ block.settings.padding_top }};--width: {{ desktop_video_width }}%;--border-style: {{ borders }};
  --border-width: {{ border_width }}px;
  --border-color: rgba(from var(--color-border) r g b / {{ border_opacity | divided_by: 100.0 }});
  --border-radius: {{ border_radius }}px;
{% endcapture %}
<div
  class="pb-custom pt-custom spacing-style video-block w-custom border-style{% if request.visual_preview_mode %} w-500 bg-white p-sp-5 rounded-5{% endif %}"
  style="{{ style | strip | strip_newlines }}"
  {{ block.shopify_attributes }}
>
  {% if video_source == 'local' and video_local != blank %}
    {% liquid
      assign preview_image = video_local.preview_image | image_url: width: 1100
      if cover_image != blank
        assign preview_image = cover_image | image_url: width: 1100
      endif
      assign source = video_local.sources
      assign source_url = ''
      for s in source
        if s.format == 'mp4'
          assign source_url = s.url
          break
        endif
      endfor
      assign element = 'video-local-play'
      if autoplay
        assign element = 'video-local'
      endif
    %}
    {% capture attributes %}
      class="block video-block{{ rounded }}" style="--aspect-ratio: {{ aspect_ratio }}"
    {% endcapture %}
    <{{ element }} {{ attributes }}>
      <div class="video-thumbnail overflow-hidden{{ rounded }} w-full h-full">
        {%
          render 'responsive-image',
          type: 'product',
          image: preview_image,
          image_alt: alt_description | escape,
          motion: false,
          class: 'w-full h-full'
        %}
      </div>
      {%- if autoplay == false or request.visual_preview_mode -%}
        <div class="deferred-media__poster-button absolute z-3 flex content-center wh-55">
          <button
            class="p-0 btn-white w-full h-full rounded-50 border-0 flex content-center pointer shadow transition play-button"
            type="button"
            aria-label="{{ 'sections.video.alt_text' | t }}"
          >
            {% render 'icon-play' %}
          </button>
        </div>
      {%- endif -%}
      <template>
        <div class="video-foreground video-has-bg h-full-screen">
          <video
            class="video-with-text w-full"
            loop="{{ looping }}"
            src="{{ source_url }}"
            poster="{{ preview_image }}"
            playsinline="true"
            muted
            autoplay="{{ autoplay }}"
            title="{{ alt_description | escape }}"
          ></video>
        </div>
      </template>
    </{{ element }}>
  {% elsif video_source == 'url' and video_url != blank %}
    <video-section class="video-block block relative overflow-hidden">
      <div
        class="video-has-bg video-block relative{{ rounded }}"
        style="--aspect-ratio: {{ aspect_ratio }};"
      >
        {%- if video_url.type == 'youtube' -%}
          <iframe
            src="https://www.youtube.com/embed/{{ video_id }}?autoplay={% if autoplay -%}1{% else %}0{%- endif -%}&loop={% if looping %}1{% else %}0{% endif %}&playlist={{ video_id }}&mute={% if autoplay -%}1{% else %}0{%- endif -%}&playsinline=1"
            class="js-youtube no-js-hidden"
            allow="autoplay; encrypted-media"
            title="{{ alt_description | escape }}"
            allowfullscreen
          ></iframe>
        {%- else -%}
          <iframe
            src="https://player.vimeo.com/video/{{ video_id }}?autoplay={% if autoplay -%}1{% else %}0{%- endif -%}&loop={% if looping %}1{% else %}0{% endif %}&muted={% if autoplay -%}1{% else %}0{%- endif -%}"
            class="js-vimeo no-js-hidden"
            allow="autoplay; encrypted-media"
            title="{{ alt_description | escape }}"
            allowfullscreen
          ></iframe>
        {%- endif -%}
      </div>
    </video-section>
  {% else %}
    <div class="{{ rounded }}" style="--aspect-ratio: {{ aspect_ratio }}">
      {%- render 'placeholder-render', type: 'video', class: 'img-placeholder h-full w-full' -%}
    </div>
  {% endif %}
</div>
{% schema %}
{
  "name": "t:sections.all.video.label",
  "tag": null,
  "settings": [
    {
      "type": "paragraph",
      "content": "t:sections.all.video.how_to_use"
    },
    {
      "type": "select",
      "id": "video_source",
      "label": "t:sections.all.video.settings.source.label",
      "default": "url",
      "options": [
        {
          "value": "local",
          "label": "t:sections.all.video.settings.source.uploaded_video.label"
        },
        {
          "value": "url",
          "label": "t:sections.all.video.settings.source.external_link.label"
        }
      ]
    },
    {
      "type": "video_url",
      "id": "video_url",
      "accept": ["youtube", "vimeo"],
      "label": "t:sections.video.settings.video_link.label",
      "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc",
      "visible_if": "{{ block.settings.video_source == 'url' }}"
    },
    {
      "type": "video",
      "id": "video_local",
      "label": "t:sections.video.settings.video_local.label",
      "info": "t:sections.video.settings.video_local.info_2",
      "visible_if": "{{ block.settings.video_source == 'local' }}"
    },
    {
      "type": "image_picker",
      "id": "cover_image",
      "label": "t:sections.video.settings.video_poster.label",
      "visible_if": "{{ block.settings.video_source == 'local' }}"
    },
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "t:sections.video.settings.autoplay.label",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "looping",
      "label": "t:sections.video.settings.looping.label",
      "default": false
    },
    {
      "type": "text",
      "id": "alt_description",
      "label": "t:sections.video.settings.alt_description.label",
      "info": "t:sections.video.settings.alt_description.info",
      "default": "Video alt text"
    },
    {
      "type": "select",
      "id": "aspect_ratio",
      "options": [
        {
          "value": "16/9",
          "label": "t:sections.video.settings.aspect_ratio.option__1"
        },
        {
          "value": "21/9",
          "label": "t:sections.video.settings.aspect_ratio.option__2"
        },
        {
          "value": "adapt",
          "label": "t:sections.video.settings.aspect_ratio.option__3"
        }
      ],
      "default": "16/9",
      "label": "t:sections.video.settings.aspect_ratio.label"
    },
    {
      "type": "range",
      "id": "desktop_video_width",
      "min": 1,
      "max": 100,
      "step": 1,
      "unit": "%",
      "default": 100,
      "label": "t:sections.all.video.width",
      "info": "t:sections.all.video.info_width"
    },
    {
      "type": "header",
      "content": "t:sections.custom_section.settings.appearance.settings.borders.label"
    },
    {
      "type": "select",
      "id": "borders",
      "options": [
        {
          "value": "none",
          "label": "t:sections.custom_section.settings.appearance.settings.borders.options__1.label"
        },
        {
          "value": "solid",
          "label": "t:sections.custom_section.settings.appearance.settings.borders.options__2.label"
        }
      ],
      "default": "none",
      "label": "t:sections.custom_section.settings.appearance.settings.borders.style"
    },
    {
      "type": "range",
      "id": "border_width",
      "min": 1,
      "max": 10,
      "step": 0.5,
      "unit": "px",
      "label": "t:sections.custom_section.settings.appearance.settings.border_thickness.label",
      "default": 1,
      "visible_if": "{{ block.settings.borders == 'solid' }}"
    },
    {
      "type": "range",
      "id": "border_opacity",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "t:sections.custom_section.settings.appearance.settings.border_opacity.label",
      "default": 100,
      "visible_if": "{{ block.settings.borders == 'solid' }}"
    },
    {
      "type": "range",
      "id": "border_radius",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.custom_section.settings.appearance.settings.corner_radius.label",
      "default": 0
    },
    {
      "type": "header",
      "content": "t:sections.custom_section.blocks.page.spacing"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 16
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 16
    }
  ],
  "presets": [
    {
      "name": "t:sections.all.video.label",
      "category": "t:sections.group.blocks.basic"
    }
  ]
}
{% endschema %}

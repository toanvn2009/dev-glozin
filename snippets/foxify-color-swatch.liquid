{% comment %}
  This file is auto-generated by Foxify.
  This file can be re-written at any time. Please do not update this file directly.
{% endcomment %}

{% liquid
  assign element_key = ELEMENT_KEY | default: 'f'
  assign prefix_class = PREFIX_CLASS | default: 'f:'
  assign swatch_shape = SWATCH_SHAPE | default: 'circle'
  assign swatch_size = SWATCH_SIZE | default: 'medium'
  assign limit_values = MAX_OPTIONS | default: 4

  # Color swatch
  assign color_swatch = shop.metafields.foxify['product-options-swatches'].value
  assign color_swatch_trigger = color_swatch.color_swatch_trigger | downcase
  assign combine_with_shopify = color_swatch.combine_with_shopify | default: false
  assign rest_values = 0
  assign color_option = ''

  for option in product.options_with_values
    assign option_name = option.name | downcase
    if color_swatch_trigger contains option_name
      assign color_option = option
      break
    endif
  endfor
%}

{% unless color_option == blank or product.has_only_default_variant %}
  <{{ element_key }}-color-swatch
    class='{{ prefix_class }}product-card__swatch {{ prefix_class }}color-swatch {{ prefix_class }}product-card__swatch--{{ swatch_shape }} {{ prefix_class }}product-card__swatch--{{ swatch_size }}'
    tabIn
  >
    {%- liquid
      if color_option.values.size > limit_values
        assign rest_values = color_option.values.size | minus: limit_values
      endif
    -%}
    {% for value in color_option.values %}
      {% liquid
        if forloop.index > limit_values
          break
        endif
        assign value_fallback = value | split: ' ' | last | handle | downcase
        assign option_key = 'option' | append: color_option.position
        assign match_variant = product.variants | where: option_key, value | first
        assign product_url = product.url
        if match_variant != blank
          assign product_url = product_url | append: '?variant=' | append: match_variant.id
        endif
      %}

      {%- liquid
        assign swatch = value.swatch
        assign swatch_value = null
        assign swatch_focal_point = 'center'
        if swatch.image
          assign image_url = swatch.image | image_url: width: 50
          assign swatch_value = 'url(' | append: image_url | append: ')'
          assign swatch_focal_point = swatch.image.presentation.focal_point
        elsif swatch.color
          assign swatch_value = 'rgb(' | append: swatch.color.rgb | append: ')'
        endif
      -%}
      <a
        class='{{ prefix_class }}color-swatch__item focus-inset {{ prefix_class }}tooltip-activator{% if swatch_value and combine_with_shopify %} has-swatch{% endif %}'
        data-value='{{- value | escape -}}'
        data-fallback-value='{{- value_fallback -}}'
        aria-label='{{- value | escape -}}'
        role='button'
        tabindex='-1'
        href='{{ product_url }}'
        style='--{{ element_key }}-option-color-1: {{ value_fallback }};{% if swatch_value and combine_with_shopify %} --s-swatch-background: {{ swatch_value }};--s-swatch-focal-point: {{ swatch_focal_point }};{% endif %}'
      >
        <span class='{{ prefix_class }}color-swatch__item-color'></span>
        <span class='{{ prefix_class }}visually-hidden'>{{- value -}}</span>
        <span class='{{ prefix_class }}tooltip'>{{- value -}}</span>
      </a>
    {% endfor %}
    {% if rest_values > 0 %}
      <a
        class='{{ prefix_class }}color-swatch__item {{ prefix_class }}tooltip-activator {{ prefix_class }}focus-inset {{ prefix_class }}color-swatch__item-rest'
        href='{{ product.url }}'
        tabindex='-1'
      >
        <span>+{{ rest_values }}</span>
        <span class='{{ prefix_class }}tooltip'>{{ translation.products.product.view_more_options }}</span>
      </a>
    {% endif %}
  </{{ element_key }}-color-swatch>
{% endunless %}
